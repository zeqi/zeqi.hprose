/**
* Persistence dao for {{&modelName}}
* {{&dao_desc}}
* @module {{&moduleName}}Dao
* @auto-gen
* Note: auto-gen code, NOT allowed to modify
*/

'use strict'

var Q = require('q');
var debug = require('debug')('zeqi.hprose:persistence:dao:{{&moduleName}}');

var Model = require('../models/{{&moduleName}}');
var model = Model.model;

{{#is_inherits_baseDao}}
var BaseDao = require('{{#baseDao_path}}{{&baseDao_path}}{{/baseDao_path}}{{^baseDao_path}}../../base/dao/{{&moduleName}}{{/baseDao_path}}');
{{/is_inherits_baseDao}}
{{^is_inherits_baseDao}}
var BaseDao = require('../../common/commonDao');
{{/is_inherits_baseDao}}
var DaoError = BaseDao.DaoError;

/**
* Mongodb data access portal of function
*/
class Dao extends BaseDao {
    /**
    * Dao Class constructor
    */
    constructor() {
        super(model);
    }

    get NAME() {
        return '{{&daoName}}';
    }

    {{#schema_statics}}
        {{&name}}({{#conditionParams}}{{#isparam}}{{&name}},{{/isparam}}{{/conditionParams}} callback) {
            this.method = '{{&name}}';
            var self = this;
            {{#conditionParams}}
                {{#isparam}}
                    if (!{{&name}}) {
                        return Q.reject(self.paramError({{&name}})).nodeify(callback);
                    }
                {{/isparam}}
            {{/conditionParams}}
            var task = self.model.{{&name}}({{#conditionParams}}{{#isparam}}{{&name}},{{/isparam}}{{/conditionParams}} callback);
            return self.execTask(task, callback, self.method).nodeify(callback);
        }
    {{/schema_statics}}

    {{#schena_methods}}
        {{&name}}({{#conditionParams}}{{#isparam}}{{&name}},{{/isparam}}{{/conditionParams}} callback) {
            this.method = '{{&name}}';
            var self = this;
            {{#conditionParams}}
                {{#isparam}}
                    if (!{{&name}}) {
                        return Q.reject(self.paramError({{&name}})).nodeify(callback);
                    }
                {{/isparam}}
            {{/conditionParams}}
            var dog = new self.model({ {{#conditionParams}}{{&name}}:{{&name}}{{#comma}},{{/comma}}{{/conditionParams}} });
            var task = dog.{{&name}}(callback);
            return self.execTask(task, callback, self.method).nodeify(callback);
        }
    {{/schena_methods}}
}

module.exports = new Dao();